{"version":3,"file":"index.js","sources":["../src/useNextSanityImage.ts"],"sourcesContent":["import imageUrlBuilder from '@sanity/image-url';\nimport {\n\tSanityAsset,\n\tSanityImageObject,\n\tSanityImageSource,\n\tSanityModernClientLike,\n\tSanityReference\n} from '@sanity/image-url/lib/types/types';\nimport { ImageLoader } from 'next/image';\nimport { useMemo } from 'react';\n\nimport {\n\tUseNextSanityImageBuilder,\n\tUseNextSanityImageDimensions,\n\tUseNextSanityImageOptions,\n\tUseNextSanityImageProps\n} from './types';\n\nexport const DEFAULT_FALLBACK_IMAGE_QUALITY = 75;\n\nconst DEFAULT_IMAGE_BUILDER: UseNextSanityImageBuilder = (imageUrlBuilder, options) => {\n\tconst result = imageUrlBuilder\n\t\t.quality(options.quality || DEFAULT_FALLBACK_IMAGE_QUALITY)\n\t\t.fit('clip');\n\n\tif (options.width !== null) {\n\t\treturn result.width(options.width);\n\t}\n\n\treturn result;\n};\n\nfunction getSanityRefId(image: SanityImageSource): string {\n\tif (typeof image === 'string') {\n\t\treturn image;\n\t}\n\n\tconst obj = image as SanityImageObject;\n\tconst ref = image as SanityReference;\n\tconst img = image as SanityAsset;\n\n\tif (obj.asset) {\n\t\treturn obj.asset._ref || (obj.asset as SanityAsset)._id;\n\t}\n\n\treturn ref._ref || img._id || '';\n}\n\nexport function getImageDimensions(id: string): UseNextSanityImageDimensions {\n\tconst dimensions = id.split('-')[2];\n\n\tconst [width, height] = dimensions.split('x').map((num: string) => parseInt(num, 10));\n\tconst aspectRatio = width / height;\n\n\treturn { width, height, aspectRatio };\n}\n\nexport function getCroppedDimensions(\n\timage: SanityImageSource,\n\tbaseDimensions: UseNextSanityImageDimensions\n): UseNextSanityImageDimensions {\n\tconst crop = (image as SanityImageObject).crop;\n\n\tif (!crop) {\n\t\treturn baseDimensions;\n\t}\n\n\tconst { width, height } = baseDimensions;\n\tconst croppedWidth = width * (1 - (crop.left + crop.right));\n\tconst croppedHeight = height * (1 - (crop.top + crop.bottom));\n\n\treturn {\n\t\twidth: croppedWidth,\n\t\theight: croppedHeight,\n\t\taspectRatio: croppedWidth / croppedHeight\n\t};\n}\n\nexport function useNextSanityImage(\n\tsanityClient: SanityModernClientLike,\n\timage: SanityImageSource,\n\toptions?: UseNextSanityImageOptions\n): UseNextSanityImageProps;\n\nexport function useNextSanityImage(\n\tsanityClient: SanityModernClientLike,\n\timage: null,\n\toptions?: UseNextSanityImageOptions\n): null;\n\nexport function useNextSanityImage(\n\tsanityClient: SanityModernClientLike,\n\timage: SanityImageSource | null,\n\toptions?: UseNextSanityImageOptions\n): UseNextSanityImageProps | null;\n\nexport function useNextSanityImage(\n\tsanityClient: SanityModernClientLike,\n\timage: SanityImageSource | null,\n\toptions?: UseNextSanityImageOptions\n): UseNextSanityImageProps | null {\n\tconst imageBuilder = options?.imageBuilder || DEFAULT_IMAGE_BUILDER;\n\n\treturn useMemo(() => {\n\t\tif (!image) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// If the image has an alt text but does not contain an actual asset, the id will be\n\t\t// undefined: https://github.com/bundlesandbatches/next-sanity-image/issues/14\n\t\tconst id = image ? getSanityRefId(image) : null;\n\t\tif (!id) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst originalImageDimensions = getImageDimensions(id);\n\t\tconst croppedImageDimensions = getCroppedDimensions(image, originalImageDimensions);\n\n\t\tconst loader: ImageLoader = ({ width, quality }) => {\n\t\t\treturn (\n\t\t\t\timageBuilder(imageUrlBuilder(sanityClient).image(image).auto('format'), {\n\t\t\t\t\twidth,\n\t\t\t\t\toriginalImageDimensions,\n\t\t\t\t\tcroppedImageDimensions,\n\t\t\t\t\tquality: quality || null\n\t\t\t\t}).url() || ''\n\t\t\t);\n\t\t};\n\n\t\tconst baseImgBuilderInstance = imageBuilder(\n\t\t\timageUrlBuilder(sanityClient).image(image).auto('format'),\n\t\t\t{\n\t\t\t\twidth: null,\n\t\t\t\toriginalImageDimensions,\n\t\t\t\tcroppedImageDimensions,\n\t\t\t\tquality: null\n\t\t\t}\n\t\t);\n\n\t\tconst width =\n\t\t\tbaseImgBuilderInstance.options.width ||\n\t\t\t(baseImgBuilderInstance.options.maxWidth\n\t\t\t\t? Math.min(baseImgBuilderInstance.options.maxWidth, croppedImageDimensions.width)\n\t\t\t\t: croppedImageDimensions.width);\n\n\t\tconst height =\n\t\t\tbaseImgBuilderInstance.options.height ||\n\t\t\t(baseImgBuilderInstance.options.maxHeight\n\t\t\t\t? Math.min(baseImgBuilderInstance.options.maxHeight, croppedImageDimensions.height)\n\t\t\t\t: Math.round(width / croppedImageDimensions.aspectRatio));\n\n\t\treturn {\n\t\t\tloader,\n\t\t\tsrc: baseImgBuilderInstance.url() as string,\n\t\t\twidth,\n\t\t\theight\n\t\t};\n\t}, [imageBuilder, image, sanityClient]);\n}\n"],"names":["DEFAULT_FALLBACK_IMAGE_QUALITY","DEFAULT_IMAGE_BUILDER","imageUrlBuilder","options","result","quality","fit","width","getSanityRefId","image","obj","ref","img","asset","_ref","_id","getImageDimensions","id","dimensions","split","height","map","num","parseInt","aspectRatio","getCroppedDimensions","baseDimensions","crop","croppedWidth","left","right","croppedHeight","top","bottom","useNextSanityImage","sanityClient","imageBuilder","useMemo","originalImageDimensions","croppedImageDimensions","loader","auto","url","baseImgBuilderInstance","maxWidth","Math","min","maxHeight","round","src"],"mappings":"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"}